<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BBEditDocumentType</key>
	<string>CodelessLanguageModule</string>
	<key>BBLMLanguageCode</key>
	<string>Swft</string>
	<key>BBLMLanguageDisplayName</key>
	<string>Swift</string>
	<key>BBLMColorsSyntax</key>
	<true/>
	<key>BBLMIsCaseSensitive</key>
	<true/>
	<key>BBLMReferenceSearchURLTemplate</key>
	<string>https://developer.apple.com/search/?q=__SYMBOLNAME__&amp;type=Reference</string>
	<key>BBLMKeywordList</key>
	<array><!-- keywords -->
		<!-- declarations -->
		<string>associatedtype</string>
		<string>class</string>
		<string>deinit</string>
		<string>enum</string>
		<string>extension</string>
		<string>fileprivate</string>
		<string>func</string>
		<string>import</string>
		<string>init</string>
		<string>internal</string>
		<string>lazy</string>
		<string>let</string>
		<string>open</string>
		<string>private</string>
		<string>protocol</string>
		<string>public</string>
		<string>rethrows</string>
		<string>static</string>
		<string>struct</string>
		<string>subscript</string>
		<string>throws</string>
		<string>typealias</string>
		<string>var</string>
		<!-- statements -->
		<string>break</string>
		<string>case</string>
		<string>catch</string>
		<string>continue</string>
		<string>default</string>
		<string>do</string>
		<string>else</string>
		<string>fallthrough</string>
		<string>for</string>
		<string>guard</string>
		<string>if</string>
		<string>in</string>
		<string>repeat</string>
		<string>return</string>
		<string>switch</string>
		<string>throw</string>
		<string>try</string>
		<string>where</string>
		<string>while</string>
		<!-- expressions and types -->
		<string>__COLUMN__</string>
		<string>__DSO_HANDLE__</string>
		<string>__FILE__</string>
		<string>__FUNCTION__</string>
		<string>__LINE__</string>
		<string>Any</string>
		<string>as</string>
		<string>dynamic</string>
		<string>is</string>
		<string>Protocol</string>
		<string>self</string>
		<string>Self</string>
		<string>super</string>
		<string>Type</string>
		<!-- attributes and context-sensitive "keywords" -->
		<string>_</string>
		<string>@autoclosure</string>
		<string>@available</string>
		<string>@convention</string>
		<string>@discardableResult</string>
		<string>@dynamicMemberLookup</string>
		<string>@escaping</string>
		<string>@GKInspectable</string>
		<string>@IBAction</string>
		<string>@IBDesignable</string>
		<string>@IBInspectable</string>
		<string>@IBOutlet</string>
		<string>@inlinable</string>
		<string>@nonobjc</string>
		<string>@NSApplicationMain</string>
		<string>@NSCopying</string>
		<string>@NSManaged</string>
		<string>@objc</string>
		<string>@objcMembers</string>
		<string>@requires_stored_property_inits</string>
		<string>@testable</string>
		<string>@UIApplicationMain</string>
		<string>@usableFromInline</string>
		<string>@warn_unqualified_access</string>
		<string>#available</string>
		<string>#colorLiteral</string>
		<string>#column</string>
		<string>#dsohandle</string>
		<string>#else</string>
		<string>#elseif</string>
		<string>#endif</string>
		<string>#error</string>
		<string>#file</string>
		<string>#fileLiteral</string>
		<string>#function</string>
		<string>#if</string>
		<string>#imageLiteral</string>
		<string>#keyPath</string>
		<string>#line</string>
		<string>#selector</string>
		<string>#sourceLocation</string>
		<string>#warning</string>
		<string>assignment</string>
		<string>associativity</string>
		<string>convenience</string>
		<string>defer</string>
		<string>didSet</string>
		<string>final</string>
		<string>get</string>
		<string>higherThan</string>
		<string>indirect</string>
		<string>infix</string>
		<string>inout</string>
		<string>left</string>
		<string>lowerThan</string>
		<string>mutating</string>
		<string>none</string>
		<string>nonmutating</string>
		<string>operator</string>
		<string>optional</string>
		<string>override</string>
		<string>postfix</string>
		<string>precedencegroup</string>
		<string>prefix</string>
		<string>required</string>
		<string>right</string>
		<string>set</string>
		<string>unowned</string>
		<string>weak</string>
		<string>willSet</string>
		<string>safe</string>
		<string>unsafe</string>
	</array>
	<key>BBLMPredefinedNameList</key>
	<array><!-- standard library -->
		<!-- types -->
		<string>AnyBidirectionalCollection</string>
		<string>AnyCollection</string>
		<string>AnyHashable</string>
		<string>AnyIndex</string>
		<string>AnyIterator</string>
		<string>AnyKeyPath</string>
		<string>AnyRandomAccessCollection</string>
		<string>AnySequence</string>
		<string>Array</string>
		<string>ArraySlice</string>
		<string>AutoreleasingUnsafeMutablePointer</string>
		<string>Bool</string>
		<string>CVaListPointer</string>
		<string>Character</string>
		<string>Character.UnicodeScalarView</string>
		<string>Character.UnicodeScalarView.Index</string>
		<string>Character.UnicodeScalarView.Iterator</string>
		<string>ClosedRange</string>
		<string>ClosedRange.Index</string>
		<string>CodingUserInfoKey</string>
		<string>CollectionOfOne</string>
		<string>CommandLine</string>
		<string>ContiguousArray</string>
		<string>DecodingError</string>
		<string>DecodingError.Context</string>
		<string>DefaultIndices</string>
		<string>Dictionary</string>
		<string>Dictionary.Index</string>
		<string>Dictionary.Keys</string>
		<string>Dictionary.Values</string>
		<string>DictionaryIterator</string>
		<string>DictionaryLiteral</string>
		<string>Double</string>
		<string>EmptyCollection</string>
		<string>EmptyCollection.Iterator</string>
		<string>EncodingError</string>
		<string>EncodingError.Context</string>
		<string>EnumeratedIterator</string>
		<string>EnumeratedSequence</string>
		<string>FlattenCollection</string>
		<string>FlattenCollection.Index</string>
		<string>FlattenSequence</string>
		<string>FlattenSequence.Iterator</string>
		<string>Float</string>
		<string>Float80</string>
		<string>FloatingPointClassification</string>
		<string>FloatingPointRoundingRule</string>
		<string>FloatingPointSign</string>
		<string>Hasher</string>
		<string>IndexingIterator</string>
		<string>Int</string>
		<string>Int.Words</string>
		<string>Int16</string>
		<string>Int16.Words</string>
		<string>Int32</string>
		<string>Int32.Words</string>
		<string>Int64</string>
		<string>Int64.Words</string>
		<string>Int8</string>
		<string>Int8.Words</string>
		<string>IteratorOverOne</string>
		<string>IteratorSequence</string>
		<string>JoinedSequence</string>
		<string>JoinedSequence.Iterator</string>
		<string>KeyPath</string>
		<string>KeyedDecodingContainer</string>
		<string>KeyedEncodingContainer</string>
		<string>LazyCollection</string>
		<string>LazyDropWhileCollection</string>
		<string>LazyDropWhileCollection.Index</string>
		<string>LazyDropWhileSequence</string>
		<string>LazyDropWhileSequence.Iterator</string>
		<string>LazyFilterCollection</string>
		<string>LazyFilterSequence</string>
		<string>LazyFilterSequence.Iterator</string>
		<string>LazyMapCollection</string>
		<string>LazyMapSequence</string>
		<string>LazyMapSequence.Iterator</string>
		<string>LazyPrefixWhileCollection</string>
		<string>LazyPrefixWhileCollection.Index</string>
		<string>LazyPrefixWhileSequence</string>
		<string>LazyPrefixWhileSequence.Iterator</string>
		<string>LazySequence</string>
		<string>ManagedBuffer</string>
		<string>ManagedBufferPointer</string>
		<string>MemoryLayout</string>
		<string>Mirror</string>
		<string>Mirror.AncestorRepresentation</string>
		<string>Mirror.DisplayStyle</string>
		<string>Never</string>
		<string>ObjectIdentifier</string>
		<string>OpaquePointer</string>
		<string>Optional</string>
		<string>PartialKeyPath</string>
		<string>PartialRangeFrom</string>
		<string>PartialRangeFrom.Iterator</string>
		<string>PartialRangeThrough</string>
		<string>PartialRangeUpTo</string>
		<string>PlaygroundQuickLook</string>
		<string>Range</string>
		<string>ReferenceWritableKeyPath</string>
		<string>Repeated</string>
		<string>ReversedCollection</string>
		<string>ReversedCollection.Index</string>
		<string>ReversedCollection.Iterator</string>
		<string>Set</string>
		<string>Set.Index</string>
		<string>SetIterator</string>
		<string>Slice</string>
		<string>StaticString</string>
		<string>StrideThrough</string>
		<string>StrideThroughIterator</string>
		<string>StrideTo</string>
		<string>StrideToIterator</string>
		<string>String</string>
		<string>String.Index</string>
		<string>String.UTF16View</string>
		<string>String.UTF16View.Index</string>
		<string>String.UTF16View.Indices</string>
		<string>String.UTF8View</string>
		<string>String.UTF8View.Iterator</string>
		<string>String.UnicodeScalarView</string>
		<string>String.UnicodeScalarView.Iterator</string>
		<string>Substring</string>
		<string>Substring.UTF16View</string>
		<string>Substring.UTF8View</string>
		<string>Substring.UnicodeScalarView</string>
		<string>SystemRandomNumberGenerator</string>
		<string>UInt</string>
		<string>UInt.Words</string>
		<string>UInt16</string>
		<string>UInt16.Words</string>
		<string>UInt32</string>
		<string>UInt32.Words</string>
		<string>UInt64</string>
		<string>UInt64.Words</string>
		<string>UInt8</string>
		<string>UInt8.Words</string>
		<string>UnboundedRange_</string>
		<string>UnfoldSequence</string>
		<string>Unicode</string>
		<string>Unicode.ASCII</string>
		<string>Unicode.ASCII.Parser</string>
		<string>Unicode.ParseResult</string>
		<string>Unicode.Scalar</string>
		<string>Unicode.Scalar.UTF16View</string>
		<string>Unicode.UTF16</string>
		<string>Unicode.UTF16.ForwardParser</string>
		<string>Unicode.UTF16.ReverseParser</string>
		<string>Unicode.UTF32</string>
		<string>Unicode.UTF32.Parser</string>
		<string>Unicode.UTF8</string>
		<string>Unicode.UTF8.ForwardParser</string>
		<string>Unicode.UTF8.ReverseParser</string>
		<string>UnicodeDecodingResult</string>
		<string>Unmanaged</string>
		<string>UnsafeBufferPointer</string>
		<string>UnsafeBufferPointer.Iterator</string>
		<string>UnsafeMutableBufferPointer</string>
		<string>UnsafeMutablePointer</string>
		<string>UnsafeMutableRawBufferPointer</string>
		<string>UnsafeMutableRawPointer</string>
		<string>UnsafePointer</string>
		<string>UnsafeRawBufferPointer</string>
		<string>UnsafeRawBufferPointer.Iterator</string>
		<string>UnsafeRawPointer</string>
		<string>WritableKeyPath</string>
		<string>Zip2Sequence</string>
		<string>Zip2Sequence.Iterator</string>
		<!-- type aliases -->
		<string>AnyClass</string>
		<string>AnyObject</string>
		<string>BidirectionalIndexable</string>
		<string>BidirectionalSlice</string>
		<string>BooleanLiteralType</string>
		<string>CBool</string>
		<string>CChar</string>
		<string>CChar16</string>
		<string>CChar32</string>
		<string>CDouble</string>
		<string>CFloat</string>
		<string>CInt</string>
		<string>CLong</string>
		<string>CLongDouble</string>
		<string>CLongLong</string>
		<string>ClosedRangeIndex</string>
		<string>Codable</string>
		<string>CountableClosedRange</string>
		<string>CountablePartialRangeFrom</string>
		<string>CountableRange</string>
		<string>CShort</string>
		<string>CSignedChar</string>
		<string>CUnsignedChar</string>
		<string>CUnsignedInt</string>
		<string>CUnsignedLong</string>
		<string>CUnsignedLongLong</string>
		<string>CUnsignedShort</string>
		<string>CWideChar</string>
		<string>DefaultBidirectionalIndices</string>
		<string>DefaultRandomAccessIndices</string>
		<string>DictionaryIndex</string>
		<string>EmptyIterator</string>
		<string>ExpressibleByStringInterpolation</string>
		<string>ExtendedGraphemeClusterType</string>
		<string>FlattenBidirectionalCollection</string>
		<string>FlattenBidirectionalCollectionIndex</string>
		<string>FlattenCollectionIndex</string>
		<string>Float32</string>
		<string>Float64</string>
		<string>FloatLiteralType</string>
		<string>Indexable</string>
		<string>IndexableBase</string>
		<string>IntegerLiteralType</string>
		<string>JoinedIterator</string>
		<string>LazyBidirectionalCollection</string>
		<string>LazyDropWhileBidirectionalCollection</string>
		<string>LazyDropWhileIndex</string>
		<string>LazyDropWhileIterator</string>
		<string>LazyFilterBidirectionalCollection</string>
		<string>LazyFilterIndex</string>
		<string>LazyFilterIterator</string>
		<string>LazyMapBidirectionalCollection</string>
		<string>LazyMapIterator</string>
		<string>LazyMapRandomAccessCollection</string>
		<string>LazyPrefixWhileBidirectionalCollection</string>
		<string>LazyPrefixWhileIndex</string>
		<string>LazyPrefixWhileIterator</string>
		<string>LazyRandomAccessCollection</string>
		<string>MutableBidirectionalSlice</string>
		<string>MutableIndexable</string>
		<string>MutableRandomAccessSlice</string>
		<string>MutableRangeReplaceableBidirectionalSlice</string>
		<string>MutableRangeReplaceableRandomAccessSlice</string>
		<string>MutableRangeReplaceableSlice</string>
		<string>MutableSlice</string>
		<string>RandomAccessIndexable</string>
		<string>RandomAccessSlice</string>
		<string>RangeReplaceableBidirectionalSlice</string>
		<string>RangeReplaceableIndexable</string>
		<string>RangeReplaceableRandomAccessSlice</string>
		<string>RangeReplaceableSlice</string>
		<string>ReversedIndex</string>
		<string>ReversedRandomAccessCollection</string>
		<string>SetIndex</string>
		<string>StringInterpolationConvertible</string>
		<string>StringLiteralType</string>
		<string>UnboundedRange</string>
		<string>UnfoldFirstSequence</string>
		<string>UnicodeScalar</string>
		<string>UnicodeScalarType</string>
		<string>UnsafeBufferPointerIterator</string>
		<string>UnsafeMutableRawBufferPointerIterator</string>
		<string>UnsafeRawBufferPointerIterator</string>
		<string>UTF16</string>
		<string>UTF32</string>
		<string>UTF8</string>
		<string>Void</string>
		<string>Zip2Iterator</string>
		<!-- protocols -->
		<string>BidirectionalCollection</string>
		<string>BinaryFloatingPoint</string>
		<string>BinaryInteger</string>
		<string>CVarArg</string>
		<string>CaseIterable</string>
		<string>CodingKey</string>
		<string>Collection</string>
		<string>Comparable</string>
		<string>CustomDebugStringConvertible</string>
		<string>CustomLeafReflectable</string>
		<string>CustomPlaygroundDisplayConvertible</string>
		<string>CustomPlaygroundQuickLookable</string>
		<string>CustomReflectable</string>
		<string>CustomStringConvertible</string>
		<string>Decodable</string>
		<string>Decoder</string>
		<string>Encodable</string>
		<string>Encoder</string>
		<string>Equatable</string>
		<string>Error</string>
		<string>ExpressibleByArrayLiteral</string>
		<string>ExpressibleByBooleanLiteral</string>
		<string>ExpressibleByDictionaryLiteral</string>
		<string>ExpressibleByExtendedGraphemeClusterLiteral</string>
		<string>ExpressibleByFloatLiteral</string>
		<string>ExpressibleByIntegerLiteral</string>
		<string>ExpressibleByNilLiteral</string>
		<string>ExpressibleByStringLiteral</string>
		<string>ExpressibleByUnicodeScalarLiteral</string>
		<string>FixedWidthInteger</string>
		<string>FloatingPoint</string>
		<string>Hashable</string>
		<string>IteratorProtocol</string>
		<string>KeyedDecodingContainerProtocol</string>
		<string>KeyedEncodingContainerProtocol</string>
		<string>LazyCollectionProtocol</string>
		<string>LazySequenceProtocol</string>
		<string>LosslessStringConvertible</string>
		<string>MirrorPath</string>
		<string>MutableCollection</string>
		<string>Numeric</string>
		<string>OptionSet</string>
		<string>RandomAccessCollection</string>
		<string>RandomNumberGenerator</string>
		<string>RangeExpression</string>
		<string>RangeReplaceableCollection</string>
		<string>RawRepresentable</string>
		<string>Sequence</string>
		<string>SetAlgebra</string>
		<string>SignedInteger</string>
		<string>SignedNumeric</string>
		<string>SingleValueDecodingContainer</string>
		<string>SingleValueEncodingContainer</string>
		<string>Strideable</string>
		<string>StringProtocol</string>
		<string>TextOutputStream</string>
		<string>TextOutputStreamable</string>
		<string>UnicodeCodec</string>
		<string>UnkeyedDecodingContainer</string>
		<string>UnkeyedEncodingContainer</string>
		<string>UnsignedInteger</string>
		<string>_AppendKeyPath</string>
		<string>_SequenceWrapper</string>
		<!-- functions -->
		<string>abs</string>
		<string>assert</string>
		<string>assertionFailure</string>
		<string>debugPrint</string>
		<string>dump</string>
		<string>fatalError</string>
		<string>getVaList</string>
		<string>isKnownUniquelyReferenced</string>
		<string>max</string>
		<string>min</string>
		<string>numericCast</string>
		<string>precondition</string>
		<string>preconditionFailure</string>
		<string>print</string>
		<string>readLine</string>
		<string>repeatElement</string>
		<string>sequence</string>
		<string>stride</string>
		<string>swap</string>
		<string>transcode</string>
		<string>type</string>
		<string>unsafeBitCast</string>
		<string>unsafeDowncast</string>
		<string>withExtendedLifetime</string>
		<string>withUnsafeBytes</string>
		<string>withUnsafeMutableBytes</string>
		<string>withUnsafeMutablePointer</string>
		<string>withUnsafePointer</string>
		<string>withVaList</string>
		<string>withoutActuallyEscaping</string>
		<string>zip</string>
	</array>
	<key>BBLMSuffixMap</key>
	<array>
		<dict>
			<key>BBLMLanguageSuffix</key>
			<string>.swift</string>
		</dict>
	</array>
	<key>BBLMPreferredFilenameExtension</key>
	<string>swift</string>
	<key>BBLMSupportsTextCompletion</key>
	<true/>
	<key>BBLMCanSpellCheckCodeRuns</key>
	<false/>
	<key>BBLMCommentLineDefault</key>
	<string>//</string>
	<key>BBLMCommentPrefixDefault</key>
	<string>/*</string>
	<key>BBLMCommentSuffixDefault</key>
	<string>*/</string>
	<key>BBLMScansFunctions</key>
	<true/>
	<key>Language Features</key>
	<dict>
		<key>Identifier and Keyword Character Class</key>
		<string>A-Za-z_0-9@#.\xA8\xAA\xAD\xAF\xB2-\xB5\xB7-\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\xFF\x{100}-\x{2FF}\x{370}-\x{167F}\x{1681}-\x{180D}\x{180F}-\x{1DBF}\x{1E00}-\x{1FFF}\x{200B}-\x{200D}\x{202A}-\x{202E}\x{203F}-\x{2040}\x{2054}\x{2060}-\x{206F}\x{2070}-\x{20CF}\x{2100}-\x{218F}\x{2460}-\x{24FF}\x{2776}-\x{2793}\x{2C00}-\x{2DFF}\x{2E80}-\x{2FFF}\x{3004}-\x{3007}\x{3021}-\x{302F}\x{3031}-\x{303F}\x{3040}-\x{D7FF}\x{F900}-\x{FD3D}\x{FD40}-\x{FDCF}\x{FDF0}-\x{FE1F}\x{FE30}-\x{FE44}\x{FE47}-\x{FFFD}\x{300}-\x{36F}\x{1DC0}-\x{1DFF}\x{20D0}-\x{20FF}\x{FE20}-\x{FE2F}</string>
		<key>Comment Pattern</key>
		<string><![CDATA[(?x:
			(?>	//	[^\r]*	$)		(?# single line comment)
		|	(?>	/\*	(				(?# multiline comment)
						[^/*]
					|	/(?!\*)		(?# a "/" not followed by "*")
					|	\*(?!/)		(?# a "*" not followed by "/")
					|	\r
					|	(?R)		(?# recursive match to handle nested comments)
					)*?
				\*/
			)
		)]]></string>
		<key>String Pattern</key>
		<string><![CDATA[(?x:
			"""(?s).*?"""
		|	(?>	"	(
						[^"\r\\]	(?# match anything but a potential ending quote, new line, or start of escape sequence)
					|	\\.			(?# match any escape sequence pair)
					)*?
				"
			)
		)]]></string>
		<key>Number Pattern</key>
		<string><![CDATA[(?x:
			(?>	-?\b(
						(?<!\$)(?P<dec>\d[\d_]*)(\.(?P>dec))?([eE][-+]?(?P>dec))?			(?# decimal/floating point literal)
					|	0x(?P<hex>[\da-fA-F][\da-fA-F_]*)((\.(?P>hex))?[pP][-+]?(?P>dec))?	(?# hexadecimal/floating point literal)
					|	0b[01][01_]*	|	0o[0-7][0-7_]*									(?# binary, octal literals)
					)
				\b
			|	\b(true|false|nil)\b
			)
		)]]></string>
		<key>Function Pattern</key>
		<string><![CDATA[(?x:
			(?>
				(?P<function>
					(^|\s)
					(?# we have to match all the names in one go to bind function_name, so we match the name and then all possible following stuff separately)
					((?P<braces>func)|class\s+func|class|enum|struct|protocol|extension|typealias)
					\s+
					(?P<function_name>
						(?P<backtick>`?)
						(?P<initial_char>[A-Za-z_\xA8\xAA\xAD\xAF\xB2-\xB5\xB7-\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\xFF\x{100}-\x{2FF}\x{370}-\x{167F}\x{1681}-\x{180D}\x{180F}-\x{1DBF}\x{1E00}-\x{1FFF}\x{200B}-\x{200D}\x{202A}-\x{202E}\x{203F}-\x{2040}\x{2054}\x{2060}-\x{206F}\x{2070}-\x{20CF}\x{2100}-\x{218F}\x{2460}-\x{24FF}\x{2776}-\x{2793}\x{2C00}-\x{2DFF}\x{2E80}-\x{2FFF}\x{3004}-\x{3007}\x{3021}-\x{302F}\x{3031}-\x{303F}\x{3040}-\x{D7FF}\x{F900}-\x{FD3D}\x{FD40}-\x{FDCF}\x{FDF0}-\x{FE1F}\x{FE30}-\x{FE44}\x{FE47}-\x{FFFD}])
						((?P>initial_char)	|	[0-9\x{300}-\x{36F}\x{1DC0}-\x{1DFF}\x{20D0}-\x{20FF}\x{FE20}-\x{FE2F}])*
						(?P=backtick)
					|	(
							(?P<dot_op>\.)	|	(?P<initial_op>[-+*/%=<>&|!?^~\xA1-\xA7\xA9\xAB\xAC\xAE\xB0\xB1\xB6\xBB\xBF\xD7\xF7\x{2016}\x{2017}\x{2020}-\x{2027}\x{2030}-\x{203E}\x{2041}-\x{2053}\x{2055}-\x{205E}\x{2190}-\x{23FF}\x{2500}-\x{2775}\x{2794}-\x{2BFF}\x{2E00}-\x{2E7F}\x{3001}-\x{3003}\x{3008}-\x{3020}\x{3030}])
						)
						(
							(?P=dot_op)		|	(?P>initial_op)	|	[\x{300}-\x{36F}\x{1DC0}-\x{1DFF}\x{20D0}-\x{20FF}\x{FE00}-\x{FE0F}\x{FE20}-\x{FE2F}]
						)*
					)
					(
						\s* = \s* .*	(?# typealias existing type)
					|	(?(<braces>)	(?# since we can't do nested matches, only match braces for functions)
							[^{]*
							(?P<block>							(?# body)
								{								(?# literal lbrace)
									(?>
										(?> [^{}]+ )
									|	(?P>block)				(?# recursion!)
									)*
								}								(?# literal rbrace)
							)
						)
					)
				)
			)
		)]]></string>
		<key>Skip Pattern</key>
		<string><![CDATA[(?x:
			(?P>number) |
			(?P>string) |
			(?P>comment)
		)]]></string>
	</dict>
</dict>
</plist>
